(import (scheme load))
(load "sis.scm")
(load-source-bootstrap)

(load "sis-tests.scm")
(run-source-tests)

(add-st)
;(xlate-st-bootstrap)
;(load-st-bootstrap)


(smalltalk-keys)
(display-ivars st-obj)
(display-obj st-obj)
(class obj)
(superclass obj)
(display-allSupers obj)
(display-subs obj) ;; direct subclasses
(display-subclasses Object)
(allInstVarNames st-obj)
(allSuperclasses st-obj)
(selectors obj)
(describe obj)

(define $     perform:)
(define $:    perform:with:)
(define $::   perform:with:with:)
(define $:::  perform:with:with:with:)
(define $:::: perform:with:with:with:with:)
(define $&    perform:withArguments:)
(define $*    perform:withArgsList:)

(define Mumble (newSubclassName:iVars:cVars: Object 'Mumble '(mumbleString) '(mumbleClassVar)))

(import (primitives current-directory))
(current-directory "/home/kend/SiS")

(xlate-st-file->scm
  (string-append st-kernel-prefix
		 "Collection.st"))

(xlate-st-file->scm-file
  (string-append st-kernel-prefix
		 "Collection.st")
  "/home/kend/SiS/Temp/Collection.scm")

;;; Scheme

(import (primitives trace untrace trace-entry trace-exit))

(debug-parser #true)
(trace-parse-methods #true)

;(debug-parser #false)
;(trace-parse-methods #false)

 (load "/home/kend/SiS/Temp/Point.scm")
 (define p ($:: (smalltalkAt: 'Point) 'x:y: 2 3))
 (display-ivars p)
 
(import (rnrs eval) (scheme repl))
(define (st-eval st-string)
  (eval (st->scm st-string) (interaction-environment)))

(st-eval "[Smalltalk at: #D put: Dictionary new.
 D at: #a put: 1.
 D at: #b put: 2.
 D at: #c put: 3.
 D printString] value.")

(st-eval "#(1 2 3 4 5 6 7) replaceFrom: 2 to: 4 with: #(a b c d e) startingAt: 2")

(import (primitives add-exit-procedure!
  add-init-procedure!
  include-procedure-names
  integrate-procedures
  interpreted-procedure?
  make-assembly-procedure
  make-procedure
  procedure-arity
  procedure-copy
  procedure-documentation
  procedure-documentation-string
  procedure-environment
  procedure-expression
  procedure-formals
  procedure-hasher
  procedure-length
  procedure-name
  procedure-name-set!
  procedure-printer
  procedure-ref
  procedure-set!
  procedure-source-column
  procedure-source-file
  procedure-source-line
  procedure-source-position
  procedure?)
)


(st-eval "[Object new glerph] on: MessageNotUnderstood do: [ :ex |ex messageText]")
-->  "Object doesNotUnderstand: #glerph"
